################################################################################
#                                                                              #
#                                –§–ê–ô–õ –£–ß–ò–¢–ï–õ–Ø                                  #
#                                                                              #
#                                                                              #
################################################################################



from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardRemove 
from create_bot import bot, dp
from create_bot import http_api
from keyboards import get_keyboard_teacher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import requests


class TeacherHandler:
    def __init__(self, message: types.Message):
        self.dp = dp
        self.bot = bot
        self.message = message
        self.http_api = http_api
    
    async def teacher_create(self, message: types.Message):

        class Teacher(StatesGroup):
            # order_id = State()
            grade = State()
            subject = State()
            order_id = State()
            order_id2 = State()
            photo = State()



        

       
                # checker_orders_list = requests.get(f"{http_api}/order-process/").json()
                # print(checker_orders_list)

                # for checker_order in checker_orders_list :
                #     teacher_id = message.from_user.id

                #     if checker_order['doer']['user_id'] == teacher_id and checker_order['status'] == 'in_progress' or checker_order['status'] == 'on_check':
                #         await bot.send_message(message.from_user.id, "–ù–µ—Ç —É—à, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑, –∞ –ø–æ—Ç–æ–º —É–∂–µ –±–µ—Ä–∏—Å—å –∑–∞ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", reply_markup=get_keyboard_teacher("menu_teacher"))
                

                    # else:
        await Teacher.grade.set() #–°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –í –°–õ–û–í–ê–†–¨
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–∏—Å–∫–∞üîé", reply_markup=get_keyboard_teacher("grade")) #–í–´–í–û–î–ò–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –ö–õ–ê–°–°–û–í
        @dp.message_handler(state=Teacher.grade) #–§–£–ù–ö–¶–ò–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        async def load_class(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['grade'] = message.text
                await Teacher.next() #–£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ò–õ–ò –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ò–î–ï–ú –î–ê–õ–¨–®–ï
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞üîé", reply_markup=get_keyboard_teacher("subject", message.text)) #–í–´–í–û–î–ò–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –ü–†–ï–î–ú–ï–¢–û–í


        @dp.message_handler(state=Teacher.subject) #–§–£–ù–ö–¶–ò–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø, –ê –ò–ú–ï–ù–ù–û –ü–†–ï–î–ú–ï–¢–ê
        async def save_subject(message: types.Message, state: FSMContext):
                async with state.proxy() as data:
                    data['subject'] = message.text
                data_result = await state.get_data()
                #–ò–ó –ü–ï–†–ï–ú–ï–ù–ù–û–ô SUBJECT –°–î–ï–õ–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ 
                global subject
                

                subject = data_result.get('subject')
            
                

                random_subject = requests.get(f'{http_api}/random-order/{subject}/') #–ó–ê–ü–†–û–° –ù–ê –°–ï–†–í–ï–† –ü–û –£–ö–ê–ó–ê–ù–ù–´–ú –î–ê–ù–ù–´–ú
                                


                if random_subject.status_code == 200: #–ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –ó–ê–ö–ê–ó–´ –í –ë–ê–ó–ï
                    random_subject = random_subject.json()
                    print(random_subject)
                    capt = f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {random_subject['id']} \n–ü—Ä–µ–¥–º–µ—Ç: {random_subject['subject']['subject']} –∫–ª–∞—Å—Å. \n–¶–µ–Ω–∞: {random_subject['price']}"
                    

                    await bot.send_photo(message.chat.id, random_subject['photo'], caption=capt, reply_markup=get_keyboard_teacher("orders"))
                elif random_subject.status_code == 404: # –ï–°–õ–ò –ó–ê–ö–ê–ó–û–í –ù–ï–¢ –í–´–í–û–î–ò–ú –≠–¢–û–¢ –¢–ï–ö–°–¢
                    await message.answer("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç",reply_markup=get_keyboard_teacher("menu_teacher") )
                    print('----')

                await state.finish()


    async def solve(self, message: types.Message):
        print('fds')
        random_subject = requests.get(f'{http_api}/random-order/{subject}/')
        random_subject = random_subject.json()
        random_subject_id = random_subject['id']
        data_to = {
                    'doer': message.from_user.id, #–°–û–•–†–ê–ù–Ø–ï–ú –ê–ô–î–ò –†–ï–®–ê–¢–ï–õ–Ø
                    'order': random_subject_id, #–°–û–•–†–ê–ù–Ø–ï–ú –ê–ô–î–ò –ó–ê–ö–ê–ó–ê
                    'status': 'in_progress', #–ú–ï–ù–Ø–ï–ú –°–¢–ê–¢–£–° –ù–ê –ü–†–û–í–ï–†–ö–ï
                    
                }
        res_go = requests.post(f'{http_api}/order-process/', data=data_to)  #–û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –ù–ê –°–ï–†–í–ï–†

        print(res_go)

        if res_go.status_code == 201: #–£–°–õ–û–í–ò–ï –£–°–ü–ï–®–ù–û –õ–ò –û–¢–ü–†–ê–í–ò–õ–ò –ó–ê–ü–†–û–° –ù–ê –°–ï–†–í–ï–†
            res_go = res_go.json()

            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑üëç\n–ó–∞–π–¥–∏—Ç–µ –≤ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—É —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", reply_markup=get_keyboard_teacher("menu_teacher"))
            message_student = requests.get(f'{http_api}/order-process/').json()

            for trages in message_student:
                student_id = trages['order']['user']['user_id']
                phone_number = trages['order']['user']['phone_number']

            await bot.send_message(chat_id=student_id, text= f'–£—á–∏—Ç–µ–ª—å: {message.from_user.first_name} –≤–∑—è–ª –≤–∞—à –∑–∞–∫–∞–∑\n–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É: {phone_number}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /payment')

        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", reply_markup=get_keyboard_teacher("menu_teacher"))

    

        



            
                    
    async def my_solutions(self, message: types.Message):
        await bot.send_message(message.from_user.id, f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å {message.from_user.first_name}?", reply_markup=get_keyboard_teacher("my_solutions"))


    async def solved_problems(self, message: types.Message):

        my_orders = requests.get(f"{http_api}/order-process/").json()

        for order in my_orders:
            msg_task = f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order['order']['id']}\n–ó–∞–∫–∞–∑—á–∏–∫: {order['order']['user']['first_name']}\n–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {order['order']['user']['phone_number']}"
            if order['doer']['user_id']  == message.from_user.id and order['status'] == 'done':
                await bot.send_photo(message.from_user.id, order['order']['photo'], caption= msg_task, reply_markup=get_keyboard_teacher("my_solutions"))
                    # else:
                    #     await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á", reply_markup=get_keyboard_teacher("my_solutions"))



    async def await_payment(self, message: types.Message): #–ó–î–ï–°–¨ –ú–´ –í–´–í–û–î–ò–ú –ó–ê–ö–ê–ó –ö–û–¢–û–†–´–ô –í–ó–Ø–õ–ò , –ù–û –ï–ì–û –ï–©–ï –ù–ï –û–ü–õ–ê–¢–ò–õ–ò
        my_orders = requests.get(f"{http_api}/order-process/").json()

        for orders_payment in my_orders:
            print(orders_payment)
            if orders_payment ['doer']['user_id'] == message.from_user.id and orders_payment['payment'] == 'not_paid' and orders_payment['status'] == 'in_progress':
                msg_payment = f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {orders_payment['order']['id']}\n–ó–∞–∫–∞–∑—á–∏–∫: {orders_payment['order']['user']['first_name']}\n–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞:{orders_payment['order']['user']['phone_number']}"
                await bot.send_photo(message.from_user.id, orders_payment['order']['photo'], caption= msg_payment, reply_markup=get_keyboard_teacher("payment"))
            # else:
            #     await bot.send_message(message.from_user.id, "–í—ã –µ—â–µ –Ω–µ –≤–∑—è–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –≤ '–ó–∞–∫–∞–∑—ãüìö'", reply_markup=get_keyboard_teacher("my_solutions"))

            
                    



            





    async def await_problems(self, message:types.Message): # –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê –ö–ù–û–ü–ö–£ –û–ò–ñ–î–ê–Æ–¢ –†–ï–®–ï–ù–ò–Ø –í–´–í–û–î–ò–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –ó–ê–ì–†–£–ó–ò–¢–¨ –†–ï–®–ï–ù–ò–ï

        my_order = requests.get(f'{http_api}/order-process/').json()

        for my_orders_status_in_progress in my_order:
            print(my_orders_status_in_progress)
            if my_orders_status_in_progress ['doer']['user_id'] == message.from_user.id and my_orders_status_in_progress ['payment'] == 'paid' and my_orders_status_in_progress['status'] == 'in_progress': #–ü–†–û–í–ï–†–Ø–ï–ú –ü–û –ê–ô–î–ò –ï–°–¢–¨ –õ–ò –£ –†–ï–®–ê–¢–ï–õ–Ø –û–ü–õ–ê–ß–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò
                msg = f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {my_orders_status_in_progress ['order']['id']}\n–ó–∞–∫–∞–∑—á–∏–∫: {my_orders_status_in_progress['order']['user']['first_name']}\n–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {my_orders_status_in_progress['order']['user']['phone_number']}"
                await bot.send_photo(message.from_user.id, my_orders_status_in_progress['order']['photo'],  caption= msg,reply_markup=get_keyboard_teacher("download")) #–í–´–í–û–î–ò–ú –ù–£–ñ–ù–´–ï –î–ê–ù–ù–´–ï –û –ó–ê–ö–ê–ó–ï

    


                    
    async def statistic(self, message:types.Message): #–ó–î–ï–°–¨ –ú–´ –í–´–í–û–î–ò–ú –í–°–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–£ –£–ß–ò–¢–ï–õ–Ø –í–°–ï –ó–ê–†–ê–ë–û–¢–ê–ù–ù–´–ï –î–ï–ù–¨–ì–ò, –°–ö–û–õ–¨–ö–û –ó–ê–î–ê–ù–ò–ô –û–ù –†–ï–®–ò–õ –ò –¢.–î
        my_stat = requests.get(f'{http_api}/order-statistics/{11}/')
        if my_stat.status_code == 200:
            my_stat = my_stat.json()
            await bot.send_message(message.from_user.id, f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {my_stat['total_earned']}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {my_stat['total_orders']}\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {my_stat['total_tasks']}\n–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {my_stat['average_rating']}", reply_markup=get_keyboard_teacher("menu_teacher"))
        else:
            await bot.send_message(message.from_user.id, "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞!\n–í—ã –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!", reply_markup=get_keyboard_teacher("menu_teacher"))




                    
                    
        


    async def back(self, message:types.Message):# –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í –ú–ï–ù–Æ –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê –ù–ê–ó–ê–î
        await bot.send_message(message.from_user.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=get_keyboard_teacher("menu_teacher"))

    async def post_task(self, message:types.Message): # –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê –ö–ù–û–ü–ö–£ –ó–ê–ì–†–£–ó–ò–¢–¨ –†–ï–®–ï–ù–ò–ï –í–´–í–û–î–ò–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –° –§–û–¢–û–ì–†–ê–§–ò–ï–ô

        class PostTask(StatesGroup):
            photo = State()


        post_order = requests.get(f"{http_api}/order-process/").json()

        for post_orders in post_order:
            if post_orders['doer']['user_id'] == message.from_user.id and post_orders['payment'] == 'paid' and post_orders['status'] == 'in_progress':
                order_post_id = post_orders['order']['id']

                
                await PostTask.photo.set() #–°–û–ó–î–ê–ï–ú –°–õ–û–í–ê–†–¨
                await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove()) 
                
                @dp.message_handler(content_types=['photo'], state=PostTask.photo) #–°–û–•–†–ê–ù–Ø–ï–ú –†–ï–®–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê
                async def load_photo(message: types.Message, state: FSMContext):
                    async with state.proxy() as data:
                        data['photo'] = message.photo[0].file_id
                    data_result = await state.get_data()
                    photo = data_result.get('photo')

                    
                    my_order = requests.patch(f'{http_api}/order-process/{11}/', {'order_id': order_post_id, 'photo': photo, 'status':'on_check'}) #–û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–ê–¢–ß –ó–ê–ü–†–û–° –ù–ê –°–ï–†–í–ï–†

                    if my_order.status_code == 202: #–ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–¢ –õ–ò –û–®–ò–ë–û–ö –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –ó–ê–ü–†–û–°–ê
                        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µüëç", reply_markup=get_keyboard_teacher("menu_teacher"))
                        await state.finish()
                        

                    else:
                        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòï", reply_markup=get_keyboard_teacher("menu_teacher"))
                        await state.finish()
                    my_order = my_order.json()
                    print(my_order)
                    await bot.send_photo(my_order['order_user_id'], photo, caption='–£—á–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –≤–∞—à –∑–∞–∫–∞–∑\n–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ú–æ–∏ –∑–∞–∫–∞–∑—ãüìä') #–û–¢–ü–†–ê–í–Ø–õ–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–ß–ï–ù–ò–ö–£ –û –¢–û–ú –ß–¢–û –ó–ê–ö–ê–ó –í–´–ü–û–õ–ù–ï–ù
                    await state.finish() #–û–ß–ò–©–ê–ï–ú –°–õ–û–í–ê–†–¨

            else:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ü§∑‚Äç‚ôÇÔ∏è", reply_markup=get_keyboard_teacher("menu_teacher"))
                                
            
    async def can_not_tasks(self, message:types.Message): #–ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê –ö–ù–û–ü–ö–£ –ü–û–î–ê–¢–¨ –ñ–ê–õ–û–ë–£ –í–´–í–û–î–ò–ú –ö–ù–û–ü–ö–£ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø
        post_order_dispute = requests.get(f"{http_api}/order-process/").json()

        for post_orders in post_order_dispute:
            if post_orders['doer']['user_id'] == message.from_user.id and post_orders['payment'] == 'paid' and post_orders['status'] == 'in_progress':
                order_id_dispute= post_orders['order']['id']


            order_status_arbitrage = requests.patch(f'{http_api}/order-process/{11}/', {'order_id': order_id_dispute, 'status':'dispute'}) #–ü–û –ê–ô–î–ò –ó–ê–ö–ê–ó–ê –ú–ï–ù–Ø–ï–ú –ï–ì–û –°–¢–ê–¢–£–°


            if order_status_arbitrage.status_code == 202:
                await message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å. –ù–∞—Å –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫ –ø–æ–ø—Ä–æ–±—É–µ—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É ", reply_markup=get_keyboard_teacher("menu_teacher"))

            else:
                await bot.send_message(message.from_user.id, "–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=get_keyboard_teacher("my_solutions_2"))



                
            
    async def pay_order(self, message:types.Message):
        my_payment_orders = requests.get(f'{http_api}/order-process/').json()

        for order_payment in my_payment_orders:
            if order_payment['doer']['user_id'] == message.from_user.id and order_payment['payment'] == 'not_paid' and order_payment['status'] == 'in_progress':
                order_payment_id = order_payment['order']['id']

                res = requests.patch(f'{http_api}/order-process/{11}/', {'order_id': order_payment_id, 'payment':'paid'}) #–ü–û –ê–ô–î–ò –ó–ê–ö–ê–ó–ê –ú–ï–ù–Ø–ï–ú –ï–ì–û –°–¢–ê–¢–£–°

                if res.status_code == 200 or res.status_code == 202:
                        await message.answer("–ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω.\n–ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ —Ä–∞–±–æ—Ç–µ", reply_markup=get_keyboard_teacher("menu_teacher"))
            

                else:
                    await message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=get_keyboard_teacher("menu_teacher"))

            else:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã", reply_markup=get_keyboard_teacher("menu_teacher"))
    async def not_pay_order(self, message:types.Message):
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –æ–ø–ª–∞—Ç—è—Ç –∑–∞–∫–∞–∑.\n–ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∏ –æ–ø–ª–∞—Ç–∞ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø—Ä–∏—à–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞", reply_markup=get_keyboard_teacher("menu_teacher"))


    async def backs(self, message:types.Message):
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=get_keyboard_teacher("menu_teacher"))