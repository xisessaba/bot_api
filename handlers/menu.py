################################################################################
#                                                                              #
#                              –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ                                    #
#                       –ó–î–ï–°–¨ –ó–ê–ü–£–°–ö–ê–Æ–¢–°–Ø –í–°–ï –§–£–ù–ö–¶–ò–ò                          #
#                                                                              #
################################################################################


from aiogram import types
from keyboards import get_keyboard_teacher
from keyboards import get_keyboard_people
from handlers import http_async
import requests
from create_bot import http_api
from create_bot import bot, dp
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from handlers.people import Student
from handlers.teacher import TeacherHandler



class BotMain:
    def __init__(self, bot:bot):
        self.bot = bot
        
        dp.register_message_handler(self.main_handler, commands=['start', 'help'])
        dp.register_message_handler(self.main_handler, text = ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüìù', '–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞üíª'])
        dp.register_message_handler(self.student, text = ['–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µüìö','–ú–æ–∏ –∑–∞–∫–∞–∑—ãüìä','–û—Ç–º–µ–Ω–∞', '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ãüìà', '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ãüìâ', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–ºüìä', '–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ', '–†–µ—à–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ', '–ù–∞–∑–∞–¥üîô', ])
        dp.register_message_handler(self.teacher, text = ['–ó–∞–∫–∞–∑—ãüìö', '–ú–æ–∏ —Ä–µ—à–µ–Ω–∏—è‚úâÔ∏è','–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìù', '–†–µ—à–∏—Ç—å‚úçÔ∏è', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ü–µ–Ω–∞üí∏', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏—è‚è±', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –°–ü–ê–úüö´' '–ù–∞–∑–∞–¥üîö', '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ','–û–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è', '–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—É',  '–†–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å', '–û–ø–ª–∞—á–µ–Ω–æ', '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ', ])


    async def main_handler(self, message: types.Message):
        if message.text == '/start':
            look_user_by_id = message.from_user.id #–ë–ï–†–ï–ú –ß–ê–¢ –ê–ô–î–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê /START 
            res = requests.get(f'{http_api}/telegram-user/?user_id={look_user_by_id}').json() #–ü–û–õ–£–ß–ê–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï 
            if res: #–ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –í –ë–ê–ó–ï
                if res[0]['role'] == 'student': #–ü–†–û–í–ï–†–Ø–ï–ú –†–û–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –Ø–í–õ–Ø–ï–¢–°–Ø –õ–ò –û–ù –£—á–µ–Ω–∏–∫–æ—Å
                    await message.answer('–ü—Ä–∏–≤–µ—Ç, –£—á–µ–Ω–∏–∫, —Ä–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!', reply_markup=get_keyboard_people("people"))#–ï–°–õ–ò –°–¢–ê–¢–£–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –£–ß–ï–ù–ò–ö, –¢–û –û–¢–ü–†–ê–í–ò–¢–°–Ø –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï
                elif res[0]['role'] == 'teacher':
                    await message.answer('–ü—Ä–∏–≤–µ—Ç —É—á–∏—Ç–µ–ª—å, —Ä–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å', reply_markup=get_keyboard_teacher("menu_teacher"))
                else:
                    await message.answer('–ü—Ä–∏–≤–µ—Ç, –≤–∏–∂—É —Ç–µ–±—è –≤–ø–µ—Ä–≤—ã–µ.\n–Ø –±–æ—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', reply_markup=get_keyboard_people("register"))
            else: #–ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ù–ï–¢ –í –ë–ê–ó–ï –û–¢–ü–†–ê–í–ò–¢–°–Ø –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï
                await message.answer('–ü—Ä–∏–≤–µ—Ç, –≤–∏–∂—É —Ç–µ–±—è –≤–ø–µ—Ä–≤—ã–µ.\n–Ø –±–æ—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ', reply_markup=get_keyboard_people("register"))


        elif message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüìù':
            
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±", request_contact=True)) #–°–û–ó–î–ê–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£
            await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=keyboard) #–ï–°–õ–ò –£–ß–ò–¢–ï–õ–¨, –¢–û –û–¢–ü–†–ê–í–ò–¢–°–Ø –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï
                    
            @dp.message_handler(content_types=types.ContentTypes.CONTACT)
            async def process_phone(message: types.Contact):
                phone_number = message.contact.phone_number
                # await Registration.description.set()
                # await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ', reply_markup=ReplyKeyboardRemove()) #–ï–°–õ–ò –£–ß–ò–¢–ï–õ–¨, –¢–û –û–¢–ü–†–ê–í–ò–¢–°–Ø –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï
                    
                # @dp.message_handler(state=Registration.description)
                # async def process_description(message: types.Message, state: FSMContext):

                #     async with state.proxy() as data:
                #         data['description'] = message.text
                #     data_result = await state.get_data()
                #     description = data_result.get('description')
                #     await state.finish()
                


                # data = {
                #         "user_id": message.from_user.id, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –ê–ô–î–ò –£–ß–ï–ù–ò–ö–ê
                #         "username": message.from_user.username, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –Æ–ó–ï–†–ù–ï–ô–ú –£–ß–ï–ù–ò–ö–ê
                #         "first_name": message.from_user.first_name, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –ù–ò–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
                #         "last_name": message.from_user.last_name, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –§–ê–ú–ò–õ–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
                #         "phone_number": phone_number, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –¢–ï–õ–ï–§–û–ù –£–ß–ï–ù–ò–ö–ê
                #         # "description": description, 
                #         "role": "student", # –ò –î–ê–ï–ú –°–¢–ê–¢–£–° –£–ß–ï–ù–ò–ö
                #         } #

                data_student = {
                        "user_id": message.from_user.id, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –ê–ô–î–ò –£–ß–ï–ù–ò–ö–ê
                        "username": message.from_user.username, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –Æ–ó–ï–†–ù–ï–ô–ú –£–ß–ï–ù–ò–ö–ê
                        "first_name": message.from_user.first_name, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –ù–ò–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
                        "last_name": message.from_user.last_name, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –§–ê–ú–ò–õ–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
                        "phone_number": phone_number, #–°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –¢–ï–õ–ï–§–û–ù –£–ß–ï–ù–ò–ö–ê
                        # "description": description,
                        "role": "student", # –ò –î–ê–ï–ú –°–¢–ê–¢–£–° –£–ß–ï–ù–ò–ö


                }

                # res = await http_async.user_save(data)
                res_student = await http_async.user_save(data_student)


                    
                if  res_student.status_code == 201:
                    await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',reply_markup= get_keyboard_people("people") )
                else:
                    await message.answer('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',reply_markup= get_keyboard_teacher("registartion"))


                    




        elif message.text == '–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞üíª': #–ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê –ö–ù–û–ü–ö–£ –¢–ï–• –ü–û–î–î–ï–†–ñ–ö–ê –°–†–ê–ë–û–¢–ê–ï–¢ –≠–¢–û–¢ –î–ï–ö–û–†–ê–¢–û–†
            async def support(message: types.Message):
                await message.answer('–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ –ø–æ–≤–æ–¥—É\n–†–µ–∫–ª–∞–º—ã‚ùóÔ∏è\n–ñ–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è‚ùóÔ∏è\n–í–∞–º –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ https://t.me/stanley66')


    async def student(self, message: types.Message):
        if '–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µüìö' in message.text:

            student = Student(message)

            await student.student_create(message)

        elif '–ú–æ–∏ –∑–∞–∫–∞–∑—ãüìä' in message.text:

            student = Student(message)
            
            await student.my_task(message)
        elif '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ãüìà' in message.text:

            student = Student(message)
            
            await student.text_active_orders(message)

        elif '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ãüìâ' in message.text:

            student = Student(message)

            await student.text_done_orders(message)

        elif '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–ºüìä' in message.text:
            pass

        elif '–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ' in message.text:
            student = Student(message)

            await student.decision_correct(message)

        elif '–†–µ—à–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ' in message.text:
            student = Student(message)

            await student.decision_incorrect(message)

        elif '–ù–∞–∑–∞–¥üîô' in message.text:
            student = Student(message)

            await student.text_back(message)

        else:
            print(student)


    

    async def teacher(self,message:types.Message):
        if '–ó–∞–∫–∞–∑—ãüìö' in message.text:
            teacher = TeacherHandler(message)


            await teacher.teacher_create(message)


        elif '–†–µ—à–∏—Ç—å‚úçÔ∏è' in message.text:
            teacher = TeacherHandler(message)

            await teacher.solve(message)

        elif '–ú–æ–∏ —Ä–µ—à–µ–Ω–∏—è‚úâÔ∏è' in message.text:
            teacher = TeacherHandler(message)

            await teacher.my_solutions(message)

        elif '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìù' in message.text:
            pass


        elif '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ —Ü–µ–Ω–∞üí∏' in message.text:
            pass

        elif '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏—è‚è±' in message.text:
            pass

        elif '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –°–ü–ê–úüö´' in message.text:
            pass

        
        elif '–û–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è' in message.text:
            teacher = TeacherHandler(message)

            await teacher.await_problems(message)

        elif '–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—É' in message.text:
            teacher = TeacherHandler(message)

            await teacher.await_payment(message)


        elif '–†–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏' in message.text:
            teacher = TeacherHandler(message)

            await teacher.solved_problems(message)

        elif '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ' in message.text:
            teacher = TeacherHandler(message)

            await teacher.post_task(message)
            
        elif '–ù–µ –º–æ–≥—É —Ä–µ—à–∏—Ç—å' in message.text:
            teacher = TeacherHandler(message)

            await teacher.can_not_tasks(message)

        elif '–û–ø–ª–∞—á–µ–Ω–æ' in message.text:
            teacher = TeacherHandler(message)

            await teacher.pay_order(message)

        elif '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ' in message.text:
             teacher = TeacherHandler(message)

             await teacher.not_pay_order(message)

        
        elif '–ù–∞–∑–∞–¥üîô' in message.text:
            teacher = TeacherHandler(message)

            await teacher.backs(message)

        else:
            print('teacher')