################################################################################
#                                                                              #
#                                –§–ê–ô–õ –£–ß–ï–ù–ò–ö–ê                                  #
#                                                                              #
#                                                                              #
################################################################################


from aiogram import types, Dispatcher
from keyboards import get_keyboard_people
from aiogram.types import ReplyKeyboardRemove 
from create_bot import bot, dp
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from create_bot import http_api
from handlers import http_async


import requests


#–°–û–ó–î–ê–ï–ú –ö–õ–ê–°–° TASK –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ó–ê–î–ê–ù–ò–ò

class Student:
    def __init__(self, message: types.Message):
        self.bot = bot
        self.message = message

    async def student_create(self, message: types.Message):
        

        class Task(StatesGroup):
            grade = State()  #state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
            subject = State() #state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
            price = State() #state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            time = State() #state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
            photo =State() #state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ


        await Task.grade.set() #–ü–ï–†–ï–î–ê–ï–ú –í –°–õ–û–í–ê–†–¨
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=get_keyboard_people("grade"))

                        




        @dp.message_handler(state=Task.grade) #–§–£–ù–ö–¶–ò–Ø –•–†–ê–ù–ï–ù–ò–Ø –ö–õ–ê–°–°–ê
        async def load_class(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['grade'] = message.text
                await Task.next() 
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–µ–¥–º–µ—Çüìö:", reply_markup=get_keyboard_people("subject", message.text))



        @dp.message_handler(state=Task.subject) #–ó–î–ï–°–¨ –ú–´ –°–û–•–†–ê–ù–Ø–ï–ú –ü–†–ï–î–ú–ï–¢
        async def load_subjects(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['subjects'] = message.text
            await Task.next()
            await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞ - 200 —Ç–≥)', reply_markup=ReplyKeyboardRemove())


        @dp.message_handler(state=Task.price) #–ó–î–ï–°–¨ –ú–´ –°–û–•–†–ê–ù–Ø–ï–ú –¶–ï–ù–£
        async def load_price(message: types.Message, state: FSMContext):
            try:
                async with state.proxy() as data:
                    data['price'] = int(message.text)
                await Task.next()
                await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.')
            except ValueError: #–ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –û–¢–ü–†–ê–í–ò–¢ –¶–ï–ù–£ –° –°–ò–ú–í–û–õ–û–ú –û–¢–ü–†–ê–í–ò–¢–°–Ø –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï
                await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


        @dp.message_handler(state=Task.time) #–ó–î–ï–°–¨ –ú–´ –•–†–ê–ù–ò–ú –í–†–ï–ú–Ø
        async def load_time(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['time'] = message.text
            await Task.next()
            await message.reply('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–¥–∞—á—É.')


        @dp.message_handler(content_types=['photo'], state=Task.photo) #–ó–î–ï–°–¨ –ú–´ –•–†–ê–ù–ò–ú –§–û–¢–û
        async def load_photo(message: types.Message, state: FSMContext):
            async with state.proxy() as data:
                data['photo'] = message.photo[0].file_id #–§–û–¢–û –ë–£–î–ï–ú –•–†–ê–ù–ò–¢–¨ –ù–ê –°–ï–†–í–ï–†–ï –¢–ï–õ–ï–ì–†–ê–ú–ú–ê
                # new_photo = bot.download_file(data['photo'].file_path)
            await Task.next()

            data = await state.get_data() #–ü–û–õ–£–ß–ê–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –ò–ó –°–õ–û–í–ê–†–Ø –ö–û–¢–û–†–´–ô –í–í–ï–õ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–ï
            grade = data.get('grade') 
            subject = data.get('subjects')
            price = data.get('price')
            time = data.get('time')
            photo = data.get('photo')
            data_result = {
                "price": price,
                "user": message.from_user.id,
                "subject": subject,
                "photo": photo,

                # "data_to_complete": time,
                }
            await message.answer(f"–ö–ª–∞—Å—Å: {grade}\n–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–¶–µ–Ω–∞: {price}\n–í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏—è: {time}") #–û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –ü–û–õ–£–ß–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï


            res = await http_async.order_save(data_result) #–û–¢–ü–†–ê–í–Ø–õ–ï–ú –ó–ê–ü–†–û–° –ß–¢–û –ë–´ –°–û–•–†–ê–ù–ò–¢–¨ –î–ê–ù–ù–´–ï 

            if res.status_code == 201: # –ï–°–õ–ò –ó–ê–ü–†–û–° –û–¢–ü–†–ê–í–ò–¢–°–Ø –ë–ï–ó –û–®–ò–ë–û–ö –û–¢–ü–†–ê–í–ò–¢–°–Ø –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï
                await message.reply('–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!', reply_markup=get_keyboard_people("people"))
            else: # –ï–°–õ–ò –ó–ê–ü–†–û–° –í–´–ó–í–ê–õ –û–®–ò–ë–ö–£ –°–†–ê–ë–û–¢–ê–ï–¢ –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï
                await message.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=get_keyboard_people("people"))
            to_send_teachers = requests.get(f'{http_api}/telegram-user/?role=teacher').json() #–ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –£–ß–ò–¢–ï–õ–ï–ô
            print(to_send_teachers)

            for to_send in to_send_teachers: # –°–û–ó–î–ê–ï–ú –¶–ò–ö–õ –ß–¢–û–ë–´ –ù–ê–ô–¢–ò –î–ê–ù–ù–´–ï –£–ß–ò–¢–ï–õ–Ø –í –ú–ê–°–°–ò–í–ï                        # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –£–ß–ò–¢–ï–õ–Æ –û –ù–û–í–û–ú –ó–ê–ö–ê–ó–ï
                
                await bot.send_photo(to_send['user_id'], photo, caption=f'–ï—Å—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: {res.json()["order_id"]}')

                




            await state.finish() #–û–ß–ò–©–ê–ï–ú –°–õ–û–í–ê–†–¨
        




    async def my_task(self, message: types.Message):
        await message.answer("–ú–æ–∏ –∑–∞–∫–∞–∑—ãüìä", reply_markup=get_keyboard_people("active_orders"))



    async def text_active_orders(self, message: types.Message):
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ãüìà", reply_markup=get_keyboard_people("active_orders"))  
        my_orders = requests.get(f'{http_api}/order-list/?user__user_id={message.from_user.id}&order_process__status=in_progress').json() # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –ò –ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –° –°–¢–ê–¢–£–°–û–ú –ù–ê –ü–†–û–í–ï–†–ö–ï 

        if my_orders: # –° –ü–û–ú–û–©–¨–Æ –£–°–õ–û–í–ò–Ø –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –ó–ê–ö–ê–ó–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –°–û –°–¢–ê–¢–£–°–û–ú –ù–ê –ü–†–û–í–ï–†–ö–ï
            for my_order in my_orders:
                print(my_orders)

                await bot.send_photo(message.from_user.id, my_order['photo'], caption=f'–í–∞—à –∑–∞–∫–∞–∑: {my_order["id"]}\n–ü—Ä–µ–¥–º–µ—Ç: {my_order["subject"]["subject"]}\n–¶–µ–Ω–∞: {my_order["price"]}')
        else: # –ï–°–õ–ò –ó–ê–ö–ê–ó–û–í –ù–ï–¢ –¢–û –í–´–í–û–î–ò–ú –°–û–û–ë–©–ï–ù–ò–ï
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤", reply_markup=get_keyboard_people("active_orders"))    



    






    async def text_done_orders(self, message: types.Message):

        my_orders = requests.get(f'{http_api}/order-list/?user__user_id={message.from_user.id}&order_process__status=on_check').json() # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –ò –ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –° –°–¢–ê–¢–£–°–û–ú –ù–ê –ü–†–û–í–ï–†–ö–ï 

        await message.answer("–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ãüìâ", reply_markup=get_keyboard_people("active_orders_2"))

        if my_orders: # –° –ü–û–ú–û–©–¨–Æ –£–°–õ–û–í–ò–Ø –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –ó–ê–ö–ê–ó–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –°–û –°–¢–ê–¢–£–°–û–ú –ù–ê –ü–†–û–í–ï–†–ö–ï
            for my_order in my_orders:
                print("---")
                print(my_order)
                await bot.send_photo(message.from_user.id, my_order['photo'], caption=f'–í–∞—à –∑–∞–∫–∞–∑ : {my_order["id"]}\nx')
                for order_process in my_order['order_process']:
                    #    await bot.send_message(message.from_user.id,f'–†–µ—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {my_order["id"]}', reply_markup=get_keyboard_people("active_orders_2"))

                
                        await bot.send_photo(message.from_user.id, order_process['photo'], caption=f'–†–µ—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {my_order["id"]}\n–ü—Ä–µ–¥–º–µ—Ç: {my_order["subject"]["subject"]}')
        else: # –ï–°–õ–ò –ó–ê–ö–ê–ó–û–í –ù–ï–¢ –¢–û –í–´–í–û–î–ò–ú –°–û–û–ë–©–ï–ù–ò–ï
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤", reply_markup=get_keyboard_people("people"))
            

        # @dp.message_handler(text = "–†–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ") # –ü–†–ò –ù–ê–ñ–ê–¢–ò–ò –ù–ê –ö–ù–û–ü–ö–£ –†–ï–®–ï–ù–ò–ï –í–ï–†–ù–û–ï –°–†–ê–ë–û–¢–ê–ï–¢ –≠–¢–û –§–£–ù–ö–¶–ò–Ø
    async def decision_correct(self,message: types.Message):
        class OrderProcess(StatesGroup):
            order_process_id = State()
            order_process_status_id = State()
        await OrderProcess.order_process_id.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞!", reply_markup=ReplyKeyboardRemove())

        @dp.message_handler(state=OrderProcess.order_process_id)
        async def decision_create(message: types.Message, state: FSMContext):
            async with state.proxy() as order_process_status:
                order_process_status['order_process_id'] = message.text
            data_result = await state.get_data()
            order_process_id = data_result.get('order_process_id')
            
            order_status_done = requests.patch(f'{http_api}/order-process/{11}/', {'order_id': order_process_id, 'status':'done'})

            if order_status_done.status_code == 202:
                await message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!", reply_markup=get_keyboard_people("people"))
                await state.finish()

            else:
                await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_keyboard_people("active_orders"))
                await state.finish()
                

        # @dp.message_handler(text = "–†–µ—à–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ") # –ù–ï –ù–ê–°–¢–†–û–ï–ù–û –ï–©–ï , –ù–û –¢–£–¢ –ú–´ –û–¢–ü–†–ê–í–ò–ú –ó–ê–ü–†–û–° –ò –ü–û–ú–ï–ù–Ø–ï–ú –°–¢–ê–¢–£–° –ó–ê–ö–ê–ó–ê –ê–†–ë–ò–¢–†–ê–ñ
    async def decision_incorrect(self,message: types.Message):
        class OrderProcess(StatesGroup):
            order_process_id = State()
            order_process_status_id = State()
        await OrderProcess.order_process_status_id.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞!", reply_markup=ReplyKeyboardRemove())

        @dp.message_handler(state=OrderProcess.order_process_status_id)
        async def order_process_func(message: types.Message, state: FSMContext):
            async with state.proxy() as order_process_status:
                order_process_status['order_process_status_id'] = message.text
            data_result = await state.get_data()
            order_process_status_id = data_result.get('order_process_status_id')
            
            
            order_status_arbitrage = requests.patch(f'{http_api}/order-process/{11}/', {'order_id': order_process_status_id, 'status':'dispute'})

            if order_status_arbitrage.status_code == 202:
                await message.answer("–ú—ã —Å–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –Ω–µ —Å–º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å.\n–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å –ê—Ä–±–∏—Ç—Ä–∞–∂ –∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è –≤–∞–º –≤–µ—Ä–Ω—É—Ç –¥–µ–Ω—å–≥–∏)", reply_markup=get_keyboard_people("active_orders"))
                await state.finish()

            else:
                await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=get_keyboard_people("active_orders"))
                await state.finish()
            


        # @dp.message_handler(text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–ºüìä") #–ó–¥–µ—Å—å –º—ã –≤—ã–≤–µ–¥–µ–º –≤—Å—é —Å—Ç–∞—Ç—É —É—á–µ–Ω–∏–∫–∞
    async def text_statistic_orders(self,message: types.Message):
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–ºüìä", reply_markup=get_keyboard_people("active_orders_2"))




        # @dp.message_handler(text = "–ù–∞–∑–∞–¥üîô")
    async def text_back(self,message: types.Message):
        await message.answer("–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=get_keyboard_people("people"))




      
            


            





